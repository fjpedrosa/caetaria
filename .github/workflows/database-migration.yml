name: Database Migration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
      migration_type:
        description: 'Migration type'
        required: true
        type: choice
        options:
          - apply
          - rollback
          - dry-run
      migration_version:
        description: 'Migration version (for rollback)'
        required: false
        type: string

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  validate-migration:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1

      - name: Validate migration files
        run: |
          # Check migration file syntax
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Validating $file"
              # Basic SQL syntax validation
              if ! grep -q "^-- Migration:" "$file"; then
                echo "Warning: $file missing migration header"
              fi
            fi
          done

      - name: Check for destructive operations
        run: |
          # Check for dangerous operations
          DANGEROUS_PATTERNS=(
            "DROP TABLE"
            "DROP COLUMN"
            "ALTER TABLE.*DROP"
            "DELETE FROM.*WHERE.*IS NULL"
            "TRUNCATE"
          )
          
          FOUND_DANGEROUS=false
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              for pattern in "${DANGEROUS_PATTERNS[@]}"; do
                if grep -iq "$pattern" "$file"; then
                  echo "⚠️ Found potentially destructive operation in $file: $pattern"
                  FOUND_DANGEROUS=true
                fi
              done
            fi
          done
          
          if [ "$FOUND_DANGEROUS" = true ]; then
            echo "::warning::Potentially destructive operations found in migration files"
          fi

  run-migration:
    runs-on: ubuntu-latest
    needs: validate-migration
    environment: ${{ github.event.inputs.environment }}
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1

      - name: Authenticate with Supabase
        run: |
          echo "${{ secrets.SUPABASE_ACCESS_TOKEN }}" | supabase auth login --token -

      - name: Link to Supabase project
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF_PRODUCTION }}
          else
            supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF_STAGING }}
          fi

      - name: Backup database (production only)
        if: github.event.inputs.environment == 'production'
        run: |
          timestamp=$(date +%Y%m%d_%H%M%S)
          echo "Creating backup before migration: backup_${timestamp}"
          # Note: Supabase backups are handled through their dashboard/API
          # This is a placeholder for backup verification

      - name: Run migration dry-run
        if: github.event.inputs.migration_type == 'dry-run'
        run: |
          supabase db push --dry-run
          echo "✅ Dry-run completed successfully"

      - name: Apply migrations
        if: github.event.inputs.migration_type == 'apply'
        run: |
          supabase db push
          echo "✅ Migrations applied successfully"
        env:
          SUPABASE_DB_PASSWORD: ${{ github.event.inputs.environment == 'production' && secrets.SUPABASE_DB_PASSWORD_PRODUCTION || secrets.SUPABASE_DB_PASSWORD_STAGING }}

      - name: Rollback migration
        if: github.event.inputs.migration_type == 'rollback'
        run: |
          if [ -z "${{ github.event.inputs.migration_version }}" ]; then
            echo "❌ Migration version is required for rollback"
            exit 1
          fi
          
          echo "Rolling back to version: ${{ github.event.inputs.migration_version }}"
          supabase db reset --version ${{ github.event.inputs.migration_version }}
        env:
          SUPABASE_DB_PASSWORD: ${{ github.event.inputs.environment == 'production' && secrets.SUPABASE_DB_PASSWORD_PRODUCTION || secrets.SUPABASE_DB_PASSWORD_STAGING }}

      - name: Verify migration status
        run: |
          supabase migration list
          echo "Migration status verified"

      - name: Update TypeScript types
        if: github.event.inputs.migration_type == 'apply'
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            export SUPABASE_PROJECT_ID=${{ secrets.SUPABASE_PROJECT_REF_PRODUCTION }}
          else
            export SUPABASE_PROJECT_ID=${{ secrets.SUPABASE_PROJECT_REF_STAGING }}
          fi
          
          supabase gen types typescript --project-id $SUPABASE_PROJECT_ID > types_updated.ts
          
          # Create PR with updated types if this is production
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "Types updated after migration"
            # Store types as artifact for manual review
          fi

      - name: Run post-migration tests
        if: github.event.inputs.migration_type == 'apply'
        run: |
          echo "Running post-migration health checks..."
          # Add basic connection and query tests here
          
      - name: Notify migration success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ✅ Database migration completed successfully!
            - Environment: ${{ github.event.inputs.environment }}
            - Type: ${{ github.event.inputs.migration_type }}
            - Version: ${{ github.event.inputs.migration_version || 'latest' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify migration failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Database migration failed!
            - Environment: ${{ github.event.inputs.environment }}
            - Type: ${{ github.event.inputs.migration_type }}
            - Check logs for details
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}