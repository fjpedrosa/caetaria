#!/bin/bash
# Enhanced database operations with Supabase CLI
# Usage: ./.claude/commands/db <command> [options]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SUPABASE_PROJECT_ID=${SUPABASE_PROJECT_ID:-""}
LOCAL_DB_URL="postgresql://postgres:postgres@127.0.0.1:54322/postgres"

# Utility functions
log() {
    echo -e "${GREEN}[DB]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Check if Supabase CLI is installed
check_supabase_cli() {
    if ! command -v supabase &> /dev/null; then
        error "Supabase CLI not found. Install it first:"
        echo "npm install -g supabase"
        echo "or"
        echo "brew install supabase/tap/supabase"
        exit 1
    fi
}

# Check if Docker is running (needed for local Supabase)
check_docker() {
    if ! docker info &> /dev/null; then
        error "Docker is not running. Please start Docker first."
        exit 1
    fi
}

# Start local Supabase development environment
start_local() {
    log "Starting local Supabase environment..."
    check_docker
    
    supabase start
    
    if [ $? -eq 0 ]; then
        log "âœ… Local Supabase started successfully!"
        log "Studio URL: http://127.0.0.1:54323"
        log "API URL: http://127.0.0.1:54321"
        log "DB URL: ${LOCAL_DB_URL}"
        
        # Generate types automatically
        log "Generating TypeScript types..."
        npm run supabase:types
        
        log "ðŸš€ Ready for development!"
    else
        error "Failed to start local Supabase"
        exit 1
    fi
}

# Stop local Supabase
stop_local() {
    log "Stopping local Supabase environment..."
    supabase stop
    log "âœ… Local Supabase stopped"
}

# Reset local database
reset_local() {
    warn "This will reset your local database and apply all migrations."
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "Resetting local database..."
        supabase db reset
        
        # Regenerate types after reset
        log "Regenerating TypeScript types..."
        npm run supabase:types
        
        log "âœ… Database reset complete"
    else
        log "Reset cancelled"
    fi
}

# Create a new migration
create_migration() {
    local migration_name="$1"
    
    if [ -z "$migration_name" ]; then
        error "Migration name required"
        echo "Usage: $0 create-migration <name>"
        exit 1
    fi
    
    log "Creating new migration: $migration_name"
    supabase migration new "$migration_name"
    
    # Open the migration file in default editor
    local migration_file=$(ls -t supabase/migrations/*.sql | head -n1)
    if [ -f "$migration_file" ]; then
        info "Migration file created: $migration_file"
        
        # Add template content
        cat << EOF > "$migration_file"
-- Migration: $migration_name
-- Created: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
-- Description: Add description of what this migration does

BEGIN;

-- Add your migration SQL here
-- Example:
-- CREATE TABLE IF NOT EXISTS example_table (
--     id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
--     name TEXT NOT NULL,
--     created_at TIMESTAMPTZ DEFAULT NOW()
-- );

-- Enable RLS (Row Level Security)
-- ALTER TABLE example_table ENABLE ROW LEVEL SECURITY;

-- Add RLS policies
-- CREATE POLICY "Users can view their own data" ON example_table
--     FOR SELECT USING (auth.uid() = user_id);

COMMIT;
EOF
        
        log "âœ… Migration created with template content"
        log "Edit the file: $migration_file"
    fi
}

# Apply migrations
apply_migrations() {
    log "Applying migrations to local database..."
    supabase db push
    
    if [ $? -eq 0 ]; then
        log "Regenerating TypeScript types..."
        npm run supabase:types
        log "âœ… Migrations applied successfully"
    else
        error "Failed to apply migrations"
        exit 1
    fi
}

# Generate and update TypeScript types
update_types() {
    local environment="${1:-local}"
    
    log "Updating TypeScript types for $environment environment..."
    
    if [ "$environment" = "local" ]; then
        npm run supabase:types
    else
        if [ -z "$SUPABASE_PROJECT_ID" ]; then
            error "SUPABASE_PROJECT_ID not set for remote environment"
            exit 1
        fi
        SUPABASE_PROJECT_ID="$SUPABASE_PROJECT_ID" npm run supabase:types:remote
    fi
    
    log "âœ… Types updated"
}

# Database status and health check
status() {
    log "Checking Supabase status..."
    
    if supabase status &> /dev/null; then
        supabase status
        
        # Test database connection
        log "Testing database connection..."
        if docker exec supabase_db_neptunik-whatsapp-landing psql -U postgres -c "SELECT version();" &> /dev/null; then
            log "âœ… Database connection successful"
        else
            warn "Database connection failed"
        fi
        
        # Show recent migrations
        log "Recent migrations:"
        supabase migration list | tail -5
        
    else
        warn "Local Supabase is not running"
        info "Run '$0 start' to start local development environment"
    fi
}

# Backup local database
backup() {
    local backup_name="${1:-backup_$(date +%Y%m%d_%H%M%S)}"
    local backup_dir="backups"
    
    mkdir -p "$backup_dir"
    
    log "Creating database backup: $backup_name"
    
    docker exec supabase_db_neptunik-whatsapp-landing pg_dump -U postgres -d postgres > "$backup_dir/$backup_name.sql"
    
    if [ $? -eq 0 ]; then
        log "âœ… Backup created: $backup_dir/$backup_name.sql"
        
        # Compress the backup
        gzip "$backup_dir/$backup_name.sql"
        log "âœ… Backup compressed: $backup_dir/$backup_name.sql.gz"
    else
        error "Backup failed"
        exit 1
    fi
}

# Restore from backup
restore() {
    local backup_file="$1"
    
    if [ -z "$backup_file" ]; then
        error "Backup file required"
        echo "Usage: $0 restore <backup-file>"
        exit 1
    fi
    
    if [ ! -f "$backup_file" ]; then
        error "Backup file not found: $backup_file"
        exit 1
    fi
    
    warn "This will restore the database from backup and overwrite current data."
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "Restoring database from: $backup_file"
        
        # Handle compressed backups
        if [[ "$backup_file" == *.gz ]]; then
            zcat "$backup_file" | docker exec -i supabase_db_neptunik-whatsapp-landing psql -U postgres -d postgres
        else
            docker exec -i supabase_db_neptunik-whatsapp-landing psql -U postgres -d postgres < "$backup_file"
        fi
        
        if [ $? -eq 0 ]; then
            log "âœ… Database restored successfully"
            log "Regenerating TypeScript types..."
            npm run supabase:types
        else
            error "Restore failed"
            exit 1
        fi
    else
        log "Restore cancelled"
    fi
}

# Seed database with sample data
seed() {
    local seed_file="supabase/seed.sql"
    
    log "Seeding database with sample data..."
    
    if [ -f "$seed_file" ]; then
        docker exec -i supabase_db_neptunik-whatsapp-landing psql -U postgres -d postgres < "$seed_file"
        if [ $? -eq 0 ]; then
            log "âœ… Database seeded successfully"
        else
            error "Seeding failed"
            exit 1
        fi
    else
        warn "Seed file not found: $seed_file"
        info "Create a seed file with sample data to use this command"
    fi
}

# Show help
show_help() {
    echo "Enhanced Database Operations with Supabase CLI"
    echo
    echo "Usage: $0 <command> [options]"
    echo
    echo "Commands:"
    echo "  start              Start local Supabase development environment"
    echo "  stop               Stop local Supabase"
    echo "  reset              Reset local database (applies all migrations)"
    echo "  status             Show Supabase status and health check"
    echo "  create-migration   Create a new migration file"
    echo "  apply              Apply pending migrations"
    echo "  types [env]        Update TypeScript types (env: local|remote)"
    echo "  backup [name]      Backup local database"
    echo "  restore <file>     Restore from backup file"
    echo "  seed               Seed database with sample data"
    echo "  help               Show this help message"
    echo
    echo "Examples:"
    echo "  $0 start                           # Start local development"
    echo "  $0 create-migration add_users      # Create new migration"
    echo "  $0 apply                           # Apply migrations"
    echo "  $0 types remote                    # Update types from remote"
    echo "  $0 backup my_backup                # Create named backup"
    echo "  $0 restore backups/backup.sql.gz   # Restore from backup"
    echo
    echo "Environment Variables:"
    echo "  SUPABASE_PROJECT_ID   Project ID for remote operations"
    echo
}

# Main command handling
main() {
    check_supabase_cli
    
    case "${1:-help}" in
        "start")
            start_local
            ;;
        "stop")
            stop_local
            ;;
        "reset")
            reset_local
            ;;
        "status")
            status
            ;;
        "create-migration")
            create_migration "$2"
            ;;
        "apply"|"push")
            apply_migrations
            ;;
        "types")
            update_types "$2"
            ;;
        "backup")
            backup "$2"
            ;;
        "restore")
            restore "$2"
            ;;
        "seed")
            seed
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

# Make sure we're in the project root
cd "$(dirname "$0")/../.."

# Run main function
main "$@"